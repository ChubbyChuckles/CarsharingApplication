[x] Introduce a guided onboarding flow for new coordinators using a PyQt6 QWizard or stacked dialog sequence so key setup steps (team roster, default tariffs, API key) are captured before the main window loads; reuse existing settings persistence in `rideshare_app.py`.
[ ] Redesign the ride creation and ledger tabs as progressive disclosure panels with clear typography hierarchy (via updated QSS) and responsive layouts to cut down vertical scrolling; prototype layouts in Qt Designer to validate flow before implementation.
[ ] Add comprehensive inline form validation and friendly error messaging across all data-entry widgets (use `QValidator`, `QRegularExpressionValidator`, and toast-like `QMessageBox` replacements) so users know exactly how to fix mistakes without modal interruptions.
[ ] Implement full keyboard-navigation and accessibility support by defining tab orders, accelerator keys, focus rectangles, and leveraging PyQt6's `QAccessible` hooks; pair with high-contrast and WCAG-compliant color variants in the stylesheet.
[ ] Provide real-time feedback during long-running operations (Google Maps lookups, PDF exports, MSI-triggered updates) using non-blocking `QProgressDialog` instances and status-bar messaging tied to the existing worker thread abstractions.
[ ] Create a consolidated notification and activity center panel that logs API errors, export outcomes, and background sync status, reducing the reliance on transient modal dialogs.
[ ] Extend error recovery by adding retry + offline fallback logic around Google Maps calls (caching the most recent successful routes via SQLite) to prevent user dead-ends when connectivity is unreliable.
[ ] Introduce lightweight analytics dashboards (per-member cost trends, ride frequency heatmaps) using a plotting library such as PyQtGraph embedded in a dedicated tab to surface actionable insights.
[ ] Expand automated UX regression coverage with PyQt-focused UI tests (e.g., `pytest-qt`) to confirm critical flows—ride creation, ledger export, settings update—stay accessible and responsive.
[ ] Document UX conventions and interaction patterns in `docs/` (tone of voice, component usage, accessibility guarantees) so future contributors can extend the interface consistently.
[x] Deliver professional receipt-style PDF exports with cumulative balance sections using ReportLab (`src/utils/pdf_exporter.py`).
[x] Package the application for Windows via cx_Freeze MSI builds (`scripts/build_msi.py`) so non-technical staff can install updates without Python tooling.